package ${packageName}.controller;

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;

import java.util.List;
import java.util.Arrays;

import com.cbb.freshorder.common.utils.StringUtils;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import com.cbb.freshorder.framework.aspectj.lang.annotation.Log;
import com.cbb.freshorder.framework.aspectj.lang.enums.BusinessType;
import ${packageName}.domain.${ClassName};
import ${packageName}.service.I${ClassName}Service;
import com.cbb.freshorder.framework.web.controller.BaseController;
import com.cbb.freshorder.framework.web.domain.AjaxResult;
import com.cbb.freshorder.common.utils.poi.ExcelUtil;
import com.cbb.freshorder.framework.web.page.TableDataInfo;

/**
 * ${functionName}Controller
 *
 * @author ${author}
 * @date ${datetime}
 */
@RestController
@RequestMapping("/${moduleName}/${businessName}" )
public class ${ClassName}Controller extends BaseController {
    @Autowired
    private I${ClassName}Service ${className}Service;

    /**
     * 查询${functionName}列表
     */
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:list')" )
    @GetMapping("/list" )
    public TableDataInfo list(${ClassName} ${className}) {
        startPage();
        QueryWrapper<${ClassName}> queryWrapper = new QueryWrapper<${ClassName}>();
#foreach($column in $columns)
#set($queryType=$column.queryType)
#set($javaField=$column.javaField)
#set($javaType=$column.javaType)
#set($columnName=$column.columnName)
#set($AttrName=$column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})
#if($column.query)
#if($column.queryType == "EQ")
#if($javaType == 'String')
if(StringUtils.isNotBlank(${className}.get$AttrName())){
     queryWrapper.eq("$columnName" ,${className}.get$AttrName());
}
#else
if(${className}.get$AttrName() != null){
     queryWrapper.eq("$columnName" ,${className}.get$AttrName());
}
#end
    #elseif($queryType == "NE")
        #if($javaType == 'String')
            if (StringUtils.isNotBlank(${className}.get$AttrName())){
            queryWrapper.ne("$columnName" ,${className}.get$AttrName());
        }
        #else
            if (${className}.get$AttrName() != null){
            queryWrapper.ne("$columnName" ,${className}.get$AttrName());
        }
        #end
    #elseif($queryType == "GT")
        #if($javaType == 'String')
            if (StringUtils.isNotBlank(${className}.get$AttrName())){
            queryWrapper.gt("$columnName" ,${className}.get$AttrName());
        }
        #else
            if (${className}.get$AttrName() != null){
            queryWrapper.gt("$columnName" ,${className}.get$AttrName());
        }
        #end
    #elseif($queryType == "GTE")
        #if($javaType == 'String')
            if (StringUtils.isNotBlank(${className}.get$AttrName())){
            queryWrapper.ge("$columnName" ,${className}.get$AttrName());
        }
        #else
            if (${className}.get$AttrName() != null){
            queryWrapper.ge("$columnName" ,${className}.get$AttrName());
        }
        #end
    #elseif($queryType == "LT")
        #if($javaType == 'String')
            if (StringUtils.isNotBlank(${className}.get$AttrName())){
            queryWrapper.lt("$columnName" ,${className}.get$AttrName());
        }
        #else
            if (${className}.get$AttrName() != null){
            queryWrapper.lt("$columnName" ,${className}.get$AttrName());
        }
        #end
    #elseif($queryType == "LTE")
        #if($javaType == 'String')
            if (StringUtils.isNotBlank(${className}.get$AttrName())){
            queryWrapper.le("$columnName" ,${className}.get$AttrName());
        }
        #else
            if (${className}.get$AttrName() != null){
            queryWrapper.le("$columnName" ,${className}.get$AttrName());
        }
        #end
    #elseif($queryType == "LIKE")
        #if($javaType == 'String')
            if (StringUtils.isNotBlank(${className}.get$AttrName())){
            queryWrapper.like("$columnName" ,${className}.get$AttrName());
        }
        #else
            if (${className}.get$AttrName() != null){
            queryWrapper.like("$columnName" ,${className}.get$AttrName());
        }
        #end
    #elseif($queryType == "BETWEEN")
    #end
#end
#end
        List<${ClassName}> list = ${className}Service.list(queryWrapper);
        return AjaxResult.success(getDataTable(list));
    }

    /**
     * 导出${functionName}列表
     */
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:export')" )
    @Log(title = "${functionName}" , businessType = BusinessType.EXPORT)
    @GetMapping("/export" )
    public AjaxResult export(${ClassName} ${className}) {
        QueryWrapper<${ClassName}> queryWrapper = new QueryWrapper<${ClassName}>(${className});
        List<${ClassName}> list = ${className}Service.list(queryWrapper);
        ExcelUtil<${ClassName}> util = new ExcelUtil<${ClassName}>(${ClassName}. class);
        return util.exportExcel(list, "${businessName}" );
    }

    /**
     * 获取${functionName}详细信息
     */
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:query')" )
    @GetMapping(value = "/{${pkColumn.javaField}}" )
    public AjaxResult getInfo(@PathVariable("${pkColumn.javaField}" ) ${pkColumn.javaType} ${pkColumn.javaField}) {
        return AjaxResult.success(${className}Service.getById(${pkColumn.javaField}));
    }

    /**
     * 新增${functionName}
     */
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:add')" )
    @Log(title = "${functionName}" , businessType = BusinessType.INSERT)
    @PostMapping
    public AjaxResult add(@RequestBody ${ClassName} ${className}) {
        return toAjax(${className}Service.save(${className}) ? 1 : 0);
    }

    /**
     * 修改${functionName}
     */
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:edit')" )
    @Log(title = "${functionName}" , businessType = BusinessType.UPDATE)
    @PutMapping
    public AjaxResult edit(@RequestBody ${ClassName} ${className}) {
        return toAjax(${className}Service.updateById(${className}) ? 1 : 0);
    }

    /**
     * 删除${functionName}
     */
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:remove')" )
    @Log(title = "${functionName}" , businessType = BusinessType.DELETE)
    @DeleteMapping("/{${pkColumn.javaField}s}" )
    public AjaxResult remove(@PathVariable ${pkColumn.javaType}[] ${pkColumn.javaField}s) {
        return toAjax(${className}Service.removeByIds(Arrays.asList(${pkColumn.javaField}s)) ? 1 : 0);
    }
}
